const buffer = require('buffer');
const assert = require('assert').strict;
const path = require('path');

const fsPromise = require('../src/fsPromise');
const Utils = require('../src/utils');
const FakeFileGenerator = require('../index');

// the max integer value that Buffer.alloc(size) supports
const bufferMaxLength = buffer.constants.MAX_LENGTH;

const filesPath = path.join(__dirname, '..', 'autogenerated-files');

describe('megabytes to bytes', () => {
    test('convert megabytes to bytes', () => {
        const megabytes = 1;
        const expectedResults = 1000000;

        const resultBytes = Utils.megabyteToByte(megabytes);
        assert.strictEqual(resultBytes, expectedResults);
    })
})

describe('writeFile not typed', () => {
    test('generate file not typed at specific size, bigger than buffer.constants.MAX_LENGTH', () => {
        const fileName = 'test.png';
        const filePath = path.join(filesPath, fileName);

        const size = bufferMaxLength + Utils.megabyteToByte(50);

        return Promise.resolve()
            .then(generateFile)
            .then(checkGeneratedFile)
            .catch((err) => {
                throw err;
            })

        function generateFile() {
            return FakeFileGenerator.generateFile(filePath, size);
        }
        async function checkGeneratedFile() {
            const fileToCheckStats = await fsPromise.stat(filePath);
            assert.strictEqual(fileToCheckStats.size, size);
        }
    }, 100000)
    test('generate file not typed at specific size, smaller than buffer.constants.MAX_LENGTH', () => {
        const fileName = 'test.png';
        const filePath = path.join(filesPath, fileName);

        const size = bufferMaxLength - Utils.megabyteToByte(5);

        return Promise.resolve()
            .then(generateFile)
            .then(checkGeneratedFile)
            .catch((err) => {
                throw err;
            })

        function generateFile() {
            return FakeFileGenerator.generateFile(filePath, size);
        }
        async function checkGeneratedFile() {
            const fileToCheckStats = await fsPromise.stat(filePath);
            assert.strictEqual(fileToCheckStats.size, size);
        }
    }, 100000)
    test('generate file not typed at specific size, smaller highWaterMark', () => {
        const fileName = 'test.png';
        const filePath = path.join(filesPath, fileName);

        const defaultHighWaterMarkSize = 16384;
        const size = defaultHighWaterMarkSize - 500;

        return Promise.resolve()
            .then(generateFile)
            .then(checkGeneratedFile)
            .catch((err) => {
                throw err;
            })

        function generateFile() {
            return FakeFileGenerator.generateFile(filePath, size);
        }
        async function checkGeneratedFile() {
            const fileToCheckStats = await fsPromise.stat(filePath);
            assert.strictEqual(fileToCheckStats.size, size);
        }
    })
})

describe('writeFile txt', () => {
    test('generate file txt, (size less than watermark)', () => {

        const expectedFileContent = 'START-->abcdefghilmnopqr<--END';
        const fileName = 'test.txt';
        const filePath = path.join(filesPath, fileName);

        const size = 30;

        return Promise.resolve()
            .then(generateFile)
            .then(checkGeneratedFile)
            .catch((err) => {
                throw err;
            })

        function generateFile() {
            const options = {
                type: 'txt',
            }
            return FakeFileGenerator.generateFile(filePath, size, options);
        }
        async function checkGeneratedFile() {
            const fileToCheckStats = await fsPromise.stat(filePath);
            assert.strictEqual(fileToCheckStats.size, size);
            const fileContent = await fsPromise.readFile(filePath);
            assert.strictEqual(fileContent.toString(), expectedFileContent);
        }
    }, 100000)
    test('generate file txt, (size less than START--><--END)', () => {

        const expectedFileContent = 'START-->abcd';
        const fileName = 'test.txt';
        const filePath = path.join(filesPath, fileName);

        const size = 12;

        return Promise.resolve()
            .then(generateFile)
            .then(checkGeneratedFile)
            .catch((err) => {
                throw err;
            })

        function generateFile() {
            const options = {
                type: 'txt',
            }
            return FakeFileGenerator.generateFile(filePath, size, options);
        }
        async function checkGeneratedFile() {
            const fileToCheckStats = await fsPromise.stat(filePath);
            assert.strictEqual(fileToCheckStats.size, size);
            const fileContent = await fsPromise.readFile(filePath);
            assert.strictEqual(fileContent.toString(), expectedFileContent);
        }
    }, 100000)
    test('generate file txt, (size less than START-->)', () => {

        const expectedFileContent = 'STAR';
        const fileName = 'test.txt';
        const filePath = path.join(filesPath, fileName);

        const size = 4;

        return Promise.resolve()
            .then(generateFile)
            .then(checkGeneratedFile)
            .catch((err) => {
                throw err;
            })

        function generateFile() {
            const options = {
                type: 'txt',
            }
            return FakeFileGenerator.generateFile(filePath, size, options);
        }
        async function checkGeneratedFile() {
            const fileToCheckStats = await fsPromise.stat(filePath);
            assert.strictEqual(fileToCheckStats.size, size);
            const fileContent = await fsPromise.readFile(filePath);
            assert.strictEqual(fileContent.toString(), expectedFileContent);
        }
    }, 100000)
    test('generate file txt, (size more than watermark)', () => {

        const expectedEndFileContent = '<--END';
        const watermarkSize = 16384;
        const fileName = 'test.txt';
        const filePath = path.join(filesPath, fileName);

        const size = watermarkSize + 50;

        return Promise.resolve()
            .then(generateFile)
            .then(checkGeneratedFile)
            .catch((err) => {
                throw err;
            })

        function generateFile() {
            const options = {
                type: 'txt',
            }
            return FakeFileGenerator.generateFile(filePath, size, options);
        }
        async function checkGeneratedFile() {
            const fileToCheckStats = await fsPromise.stat(filePath);
            assert.strictEqual(fileToCheckStats.size, size);
            const fileContent = await fsPromise.readFile(filePath);
            const fileContentToCheck = fileContent
                .toString()
                .substr(fileContent.length - expectedEndFileContent.length,fileContent.length-1);
            assert.strictEqual(fileContentToCheck, expectedEndFileContent);
        }
    }, 100000)
    test('generate file txt, (size double than watermark)', () => {

        const expectedEndFileContent = '<--END';
        const watermarkSize = 16384 * 2;
        const fileName = 'test.txt';
        const filePath = path.join(filesPath, fileName);

        const size = watermarkSize;

        return Promise.resolve()
            .then(generateFile)
            .then(checkGeneratedFile)
            .catch((err) => {
                throw err;
            })

        function generateFile() {
            const options = {
                type: 'txt',
            }
            return FakeFileGenerator.generateFile(filePath, size, options);
        }
        async function checkGeneratedFile() {
            const fileToCheckStats = await fsPromise.stat(filePath);
            assert.strictEqual(fileToCheckStats.size, size);
            const fileContent = await fsPromise.readFile(filePath);
            const fileContentToCheck = fileContent
                .toString()
                .substr(fileContent.length - expectedEndFileContent.length,fileContent.length-1);
            assert.strictEqual(fileContentToCheck, expectedEndFileContent);
        }
    }, 100000)
    test('generate file txt, (size double than watermark plus 5)', () => {

        const expectedEndFileContent = '<--END';
        const watermarkSize = (16384 * 2) +5;
        const fileName = 'test.txt';
        const filePath = path.join(filesPath, fileName);

        const size = watermarkSize;

        return Promise.resolve()
            .then(generateFile)
            .then(checkGeneratedFile)
            .catch((err) => {
                throw err;
            })

        function generateFile() {
            const options = {
                type: 'txt',
            }
            return FakeFileGenerator.generateFile(filePath, size, options);
        }
        async function checkGeneratedFile() {
            const fileToCheckStats = await fsPromise.stat(filePath);
            assert.strictEqual(fileToCheckStats.size, size);
            const fileContent = await fsPromise.readFile(filePath);
            const fileContentToCheck = fileContent
                .toString()
                .substr(fileContent.length - expectedEndFileContent.length,fileContent.length-1);
            assert.strictEqual(fileContentToCheck, expectedEndFileContent);
        }
    }, 100000)
});
