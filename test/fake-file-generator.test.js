const debug = require('debug')('fake-file-generator:test');
const assert = require('assert').strict;
const path = require('path');

const FsPromise = require('../src/fsPromise');
const Utils = require('../src/utils');

const FakeFileGenerator = require('../index');

const filesPath = path.join(__dirname, '..', 'autogenerated-files');

describe('megabytes to bytes', () => {
    test('convert megabytes to bytes', () => {
        const megabytes = 1;
        const expectedResults = 1000000;

        const resultBytes = Utils.megabyteToByte(megabytes);
        assert.strictEqual(resultBytes, expectedResults);
    })
})

describe('check functions', () => {
    test('check writeFileSync', () => {
        assert.strictEqual(typeof FakeFileGenerator.generateFile, 'function');
    })
    test('check writeFile', () => {
        assert.strictEqual(typeof FakeFileGenerator.generateFile, 'function');
    })
})

describe('writeFile', () => {
    test('generate file at specific size', () => {
        /**
         * make file of 50MB type png
         */
        debugger;
        const fileName = 'test.png';
        const filePath = path.join(filesPath, fileName);

        const size = Utils.megabyteToByte(1000);

        return Promise.resolve()
            .then(generateFile)
            .then(checkGeneratedFile)
            .catch((err) => {
                throw err;
            })

        function generateFile() {
            debugger;
            return FakeFileGenerator.generateFile(filePath, size);
        }
        async function checkGeneratedFile() {
            const fileToCheck = await FsPromise.access(filePath);
            console.log('fileToCheck', fileToCheck);
        }
    })
})


beforeEach(() => {
    //do something
})

afterEach(() => {
    //do something
})


beforeAll(() => {
    //do something
})

afterAll(() => {
    //do something
})
