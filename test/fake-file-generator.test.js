const buffer = require('buffer');
const assert = require('assert').strict;
const path = require('path');
const os = require('os');

const debug = require('debug')('fake-file-generator:test');

const fsPromise = require('../src/fsPromise');
const Utils = require('../src/utils');
const FakeFileGenerator = require('../index');

// the max integer value that Buffer.alloc(size) supports
const bufferMaxLength = buffer.constants.MAX_LENGTH;

const filesPath = path.join(__dirname, '..', 'autogenerated-files');

describe('megabytes to bytes', () => {
    test('convert megabytes to bytes', () => {
        const megabytes = 1;
        const expectedResults = 1000000;

        const resultBytes = Utils.megabyteToByte(megabytes);
        assert.strictEqual(resultBytes, expectedResults);
    })
})

describe('check functions', () => {
    test('check writeFileSync', () => {
        assert.strictEqual(typeof FakeFileGenerator.generateFile, 'function');
    })
    test('check writeFile', () => {
        assert.strictEqual(typeof FakeFileGenerator.generateFile, 'function');
    })
})

describe('writeFile', () => {
    test('generate file at specific size, bigger than buffer.constants.MAX_LENGTH', () => {
        /**
         * make file of 50MB type png
         */
        const fileName = 'test.png';
        const filePath = path.join(filesPath, fileName);

        const size = bufferMaxLength + Utils.megabyteToByte(50);

        return Promise.resolve()
            .then(generateFile)
            .then(checkGeneratedFile)
            .catch((err) => {
                throw err;
            })

        function generateFile() {
            return FakeFileGenerator.generateFile(filePath, size);
        }
        async function checkGeneratedFile() {
            const fileToCheckStats = await fsPromise.stat(filePath);
            assert.strictEqual(fileToCheckStats.size, size);
        }
    }, 100000)
    test('generate file at specific size, smaller than buffer.constants.MAX_LENGTH', () => {
        const fileName = 'test.png';
        const filePath = path.join(filesPath, fileName);

        const size = bufferMaxLength - Utils.megabyteToByte(5);

        return Promise.resolve()
            .then(generateFile)
            .then(checkGeneratedFile)
            .catch((err) => {
                throw err;
            })

        function generateFile() {
            return FakeFileGenerator.generateFile(filePath, size);
        }
        async function checkGeneratedFile() {
            const fileToCheckStats = await fsPromise.stat(filePath);
            assert.strictEqual(fileToCheckStats.size, size);
        }
    }, 100000)
    test('generate file at specific size, smaller highWaterMark', () => {
        const fileName = 'test.png';
        const filePath = path.join(filesPath, fileName);

        const defaultHighWaterMarkSize = 16384;
        const size = defaultHighWaterMarkSize - 500;

        return Promise.resolve()
            .then(generateFile)
            .then(checkGeneratedFile)
            .catch((err) => {
                throw err;
            })

        function generateFile() {
            return FakeFileGenerator.generateFile(filePath, size);
        }
        async function checkGeneratedFile() {
            const fileToCheckStats = await fsPromise.stat(filePath);
            assert.strictEqual(fileToCheckStats.size, size);
        }
    })
    test('generate file at specific size, bigger than system available memory', async () => {
        const fileName = 'test.png';
        const filePath = path.join(filesPath, fileName);

        const freeSystemMemory = os.freemem();
        const size = freeSystemMemory + Utils.megabyteToByte(100);

        try {
            debugger;
            await FakeFileGenerator.generateFile(filePath, size);
            throw Error('should go in the catch');
        } catch (e) {
            assert.strictEqual(e.message, 'should go in the catch');
        }
    })

    describe('writeFile txt', () => {
        test.only('generate file txt', () => {
            /**
             * make file of 50MB type png
             */
            const fileName = 'test.txt';
            const filePath = path.join(filesPath, fileName);

            const size = Utils.megabyteToByte(50);

            return Promise.resolve()
                .then(generateFile)
                .then(checkGeneratedFile)
                .catch((err) => {
                    throw err;
                })

            function generateFile() {
                const options = {
                    type: 'txt',
                }
                return FakeFileGenerator.generateFile(filePath, size, options);
            }
            async function checkGeneratedFile() {
                const fileToCheckStats = await fsPromise.stat(filePath);
                assert.strictEqual(fileToCheckStats.size, size);
            }
        }, 100000)
    });
})


beforeEach(() => {
    //do something
})

afterEach(() => {
    //do something
})


beforeAll(() => {
    //do something
})

afterAll(() => {
    //do something
})
